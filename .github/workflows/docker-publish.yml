name: Build and Publish Docker Image

on:
  workflow_run:
    workflows: ["CI", "tests", "linter"]
    types:
      - completed
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    concurrency: docker-build-${{ github.ref }}
    permissions:
      contents: read
      packages: write

    # Only run if all required workflows succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha

      - name: Test container functionality
        run: |
          # Get the latest built tag
          LATEST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          
          # Start the container
          CONTAINER_ID=$(docker run -d -p 8080:80 $LATEST_TAG)
          
          # Wait for container to be ready
          echo "Waiting for container to start..."
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep -q $CONTAINER_ID; then
            echo "Container failed to start"
            docker logs $CONTAINER_ID
            exit 1
          fi
          
          # Test the root endpoint
          echo "Testing root endpoint..."
          for i in {1..30}; do
            if curl -f -s http://localhost:8080/ > /dev/null; then
              echo "✅ Container is working! Root endpoint accessible."
              break
            fi
            echo "Attempt $i: Waiting for application to be ready..."
            sleep 2
          done
          
          # Final test with more detailed output
          if ! curl -f -s http://localhost:8080/ > /dev/null; then
            echo "❌ Container test failed - root endpoint not accessible"
            docker logs $CONTAINER_ID
            exit 1
          fi
          
          # Clean up
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
          echo "✅ Container test completed successfully" 